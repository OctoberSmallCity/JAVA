
    TCP是如何保证可靠性传输的?
	1.校验和机制
	  将数据段当成一个16位的整数,前面的位不能丢弃,取反,得到校验和;
	  发送的校验和与收到的校验和进行比较;
    2.确认应答与序列号
	  ACK
	  确认序号(ack) = 序列号(syn) + 1;
	  序列号还可以起到序列号排序,去掉重复序列号的数据;
	3.超时重传
	  等待最大超时时间是动态计算的.
	  在Linux中（BSD Unix和Windows下也是这样）超时以500ms为一个单位进行控制，每次判定超时重发的超时时间都是500ms的整数倍。
	  重发一次后，仍未响应，那么等待2*500ms的时间后，再次重传。等待4*500ms的时间继续重传。
	  以一个指数的形式增长。累计到一定的重传次数，TCP就认为网络或者对端出现异常，强制关闭连接。
	4.流量控制(接收方)
	  16位的滑动窗口(接收端接收数据缓冲区的剩余大小)
	  发送方接收到接收方的滑动窗口的值,调整发送速率;
	  zero窗口
	  当对端出现零窗口时,发送端会停止发送数据,并启动persistent timer 机制;
	  定时请求对端的窗口大小数据,在重试次数超过一定次数后,可能会中断 TCP 链接;
	5.拥塞机制(网络)
	  慢启动
	  慢开始算法，顾名思义，就是在传输开始时将发送窗口慢慢指数级扩大，从而避免一开始就传输大量数据导致网络拥塞。
       慢开始算法步骤具体如下
        连接初始设置拥塞窗口（Congestion Window） 为 1 MSS（一个分段的最大数据量）
        每过一个 RTT 就将窗口大小乘二
        指数级增长肯定不能没有限制的，所以有一个阈值限制，当窗口大小大于阈值时就会启动拥塞避免算法。
	  拥塞避免
	  拥塞窗口,初始值为1,每次收到ack应答时+1;
	  在传输过程中可能定时器超时的情况，这时候 TCP 会认为网络拥塞了，会马上进行以下步骤：
        将阈值设为当前拥塞窗口的一半
        将拥塞窗口设为 1 MSS
        启动拥塞避免算法
	  快速重传
	  快速重传一般和快恢复一起出现。
	  一旦接收端收到的报文出现失序的情况，接收端只会回复最后一个顺序正确的报文序号（没有 Sack 的情况下）。
	  如果收到三个重复的 ACK，无需等待定时器超时再重发而是启动快速重传。具体算法分为两种：

        TCP Taho 实现如下

            将阈值设为当前拥塞窗口的一半
            将拥塞窗口设为 1 MSS
            重新开始慢开始算法
        TCP Reno 实现如下

            拥塞窗口减半
            将阈值设为当前拥塞窗口
            进入快恢复阶段（重发对端需要的包，一旦收到一个新的 ACK 答复就退出该阶段）
            使用拥塞避免算法
        TCP New Ren 改进后的快恢复
        TCP New Reno 算法改进了之前 TCP Reno 算法的缺陷。在之前，快恢复中只要收到一个新的 ACK 包，就会退出快恢复。

        在 TCP New Reno 中，TCP 发送方先记下三个重复 ACK 的分段的最大序号。
		假如我有一个分段数据是 1 ~ 10 这十个序号的报文，
		其中丢失了序号为 3 和 7 的报文，那么该分段的最大序号就是 10。
		发送端只会收到 ACK 序号为 3 的应答。这时候重发序号为 3 的报文，
		接收方顺利接收并会发送 ACK 序号为 7 的应答。
		这时候 TCP 知道对端是有多个包未收到，会继续发送序号为 7 的报文，
		接收方顺利接收并会发送 ACK 序号为 11 的应答，
		这时发送端认为这个分段接收端已经顺利接收，接下来会退出快恢复阶段。
	  
	6.连接管理
	  三次握手与四次挥手;
