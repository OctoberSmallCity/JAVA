



    1.开闭原则
	软件实体（类、模块、函数等等)对扩展开放,对修改关闭;
	  
	  抽象化是开闭原则的关键;
	  
	  (1)相较于简单工厂模式来说,当需要生产新品种的产品时,需要修改工厂类的源码(通过传入参数来生产产品);违背了开闭原则;
	  
	  (2)对于工厂模式来说,当生产新产品时,只需编写具体的产品类以及相对应具体的工厂类,符合开闭原则;
	  
	  
	2.单一职责原则
	  一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。
       
	  (1)实现高内聚,低耦合;
	  
	  (2)应用于项目中,对数据库中各个表的操作,在不同的类中完成;
	  
	  
	3.里氏替换原则
      在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，
	  反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。
	   
	  (1)实现开闭原则的重要方式之一,在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。
	  
	  (2)应用到项目中,客户(Customer)可以分为VIP客户(VIPCustomer)和普通客户(CommonCustomer)两类，系统需要提供一个发送Email的功能
	  可以考虑增加一个新的抽象客户类Customer，
	  而将CommonCustomer和VIPCustomer类作为其子类，
	  邮件发送类EmailSender类针对抽象客户类Customer编程，
	  根据里氏代换原则，能够接受基类对象的地方必然能够接受子类对象，因此将EmailSender中的send()方法的参数类型改为Customer，
	  如果需要增加新类型的客户，只需将其作为Customer类的子类即可;
	  
	  (3)使用开闭原则需要注意的地方:
	      1)子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。
		  
		  2)我们在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法;
		  运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。
		  里氏代换原则是开闭原则的具体实现手段之一。
		  
		  3)在编译阶段，Java编译器会检查一个程序是否符合里氏代换原则，这是一个与实现无关的、纯语法意义上的检查，但Java编译器的检查是有局限的。
		  
	4.依赖倒转原则
	  抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。
	  
	  (1)为了确保该原则的应用，一个具体类应当只实现接口或抽象类中声明过的方法，而不要给出多余的方法，否则将无法调用到在子类中增加的新方法。
	  
	  
	  (2)在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过依赖注入(DependencyInjection, DI)的方式注入到其他对象中;
	         依赖注入
			   指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象。
			   注入方式:
			         1)构造注入是指通过构造函数来传入具体类的对象;
					 2)设值注入是指通过Setter方法来传入具体类的对象;
					 3)接口注入是指通过在接口中声明的业务方法来传入具体类的对象;
					 
	项目应用:Dao层接口的编写;
	  
	  
    5.接口隔离原则
	  使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。
	  
	    (1)可以理解为角色,一个角色干自己该干的事;
		
		
		(2)项目中的应用:各个接口具有不同的实现方法(自己该干的事);
		
		
		
    6.迪米特原则
	  一个软件实体应当尽可能少地与其他实体发生相互作用。
	    


    7.合成复用原则
	  复用时要尽量使用组合/聚合关系（关联关系），少用继承

      	  
	  