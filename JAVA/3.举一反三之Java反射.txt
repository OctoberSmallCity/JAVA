


    反射 (Reflection) 是 Java 的特征之一，
	它允许运行中的 Java 程序获取自身的信息，
	并且可以操作类或对象的内部属性。
	
	反射的核心是 JVM 在运行时才动态加载类或调用方法/访问属性，它不需要事先（写代码的时候或编译期）知道运行对象是谁。
	
	Java 反射主要提供以下功能：

     1.在运行时判断任意一个对象所属的类；
     2.在运行时构造任意一个类的对象；
     3.在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；
     4.在运行时调用任意一个对象的方法;
    重点：是运行时而不是编译时;
	
	实际使用:ssm框架中spring.xml文件配置,需要加载的bean写入到配置文件中;
	
	1.获得Class对象
	
	方法有三种：

			(1) 使用 Class 类的 forName 静态方法:

			  public static Class<?> forName(String className)
			``` 
			比如在 JDBC 开发中常用此方法加载数据库驱动:
			```java
			 Class.forName(driver);


			(2)直接获取某一个对象的 class，比如:

			Class<?> klass = int.class;
			Class<?> classInt = Integer.TYPE;
			(3)调用某个对象的 getClass() 方法，比如:

			StringBuilder str = new StringBuilder("123");
			Class<?> klass = str.getClass();
	
	2.判断是否为某个类的实例
	
	    一般地，我们用 instanceof 关键字来判断是否为某个类的实例。
		同时我们也可以借助反射中 Class 对象的 isInstance() 方法来判断是否为某个类的实例，
		它是一个 native 方法：
    
         public native boolean isInstance(Object obj);
		 
	3.通过反射来生成对象主要有两种方式。

			(1)使用Class对象的newInstance()方法来创建Class对象对应类的实例。

			Class<?> c = String.class;
			Object str = c.newInstance();
			(2)先通过Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance()方法来创建实例。这种方法可以用指定的构造器构造类的实例。

			//获取String所对应的Class对象
			Class<?> c = String.class;
			//获取String类带一个String参数的构造器
			Constructor constructor = c.getConstructor(String.class);
			//根据构造器创建实例
			Object obj = constructor.newInstance("23333");
			System.out.println(obj);

	