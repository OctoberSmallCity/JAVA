



    1.Java的四个特性
	
	封装;继承;多态;抽象;
	
	Object类,是任何类默认的父类;
	
	(1) 我是谁? getClass()说明本质上是谁,toString()是当前职位的名片;
	(2)我从哪里来? Object()构造方法是生产对象的基本步骤,clone()是繁殖对象的另一种方式;
	(3)我到哪里去? finalize()是在对象销毁时触发的方法;(JDK9后被标记为过时方法)
	
	
	(4)世界是否因你而不同? hashCode()和equals()方法来判断与其他元素是否相等;
	
	(5)与他人如何协调? wait()和notify()是对象间通信与协作的一组方法;
	   (已经被同步信号,锁,阻塞集合等替代)
	   
	   
	2.多态
	
    (1)实现方式
	    1)方法重写(override):实现运行时的多态(后绑定),绑定内存中正在 运行的那个对象的方法;
		2)方法重载(overload):实现编译时的多态(前绑定);
		
	(2)应用举例:用户和管理员登录网站,会跳转到不同的页面,这里都继承了父类的login方法;
	   针对不同的对象,有了不同的操作方法;
	
	
	之方法重写与重载

	
	
	  
	  1.方法重载:
	        1)发生在同一个类中;
			2)参数列表不同(参数个数,类型不同);
			3)调用:
			     方法签名: 方法名称+参数类型+参数个数;
				 JVM通过方法签名决定调用哪种重载方法;
				 JVM在重载方法中选择合适目标方法的顺序:
				     (1)精确匹配;
					 (2)如果是基本数据类型,自动转换成更大表示范围的基本类型;
					 (3)通过自动拆箱与装箱;
					 (4)通过子类向上转型继承路线依次匹配;
					 (5)通过可变参数匹配;
		举例:
		     class Animal{
			    public void Bark(){
				     System.out.prinln("Woof");
				}
				
				//方法名相同,参数不同
				public  void Bark(int num){
				     if(num == 2){
					 System.out.println("Two Woof");
					 }
				}
			 }
	   
	   
	   2.方法重写:
	        1)必须是父类和子类之间;
			2)返回类型应该可以向上转型成父类的返回类型(两小);
			3)该方法子类访问权限不小于父类的访问权限(一大);
			4)子类中该方法的异常个数不大于父类的(里氏替换原则)(两小);
			5)根据不同的子类对象确定调用哪个方法;
			6)方法名与参数类型以及个数必须严格要求一致(两同);
			7)只针对非静态,非final,非构造方法;
			     静态方法属于类,都会被加载;
				 final方法不可以被重写;
		    8)在子类覆写的方法中调用父类的方法,可用super关键字;
		举例:
		     class Animal{
			     public void bark(){
				     System.out.println("Woof");
				 }
			 }
			 
			 //方法名与参数相同;
			 class Dog extends Animal{
			     public void bark(){
				     System.out.println("Dog");
				 }
			 }
		
	
	